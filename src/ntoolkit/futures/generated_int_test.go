
// Generated by ntoolkit/futures
package futures_test

import "ntoolkit/futures"


type DeferredInt struct {
	DeferredValue futures.Promise
}

func (promise *DeferredInt) init() {
	if promise.DeferredValue == nil {
		promise.DeferredValue = &futures.DeferredValue{}
	}
}

func (promise *DeferredInt) Resolve(result int) {
	promise.init()
	promise.DeferredValue.PResolve(result)
}

func (promise *DeferredInt) Reject(err error) {
	promise.init()
	promise.DeferredValue.PReject(err)
}

func (promise *DeferredInt) Errors() []error {
	promise.init()
	return promise.DeferredValue.PErrors()
}

func (promise *DeferredInt) Then(resolve func(int), reject func(error)) *DeferredInt {
	promise.init()
	promise.DeferredValue.PThen(func(value interface{}) {
		if v, ok := value.(int); ok {
			resolve(v)
		} else {
		  panic("Invalid value used to resolve DeferredInt")
		}
	}, reject)
	return promise
}

func (promise *DeferredInt) PThen(result func(interface{}), reject func(error)) futures.Promise {
	promise.init()
	return promise.DeferredValue.PThen(result, reject)
}

func (promise *DeferredInt) PErrors() []error {
	promise.init()
	return promise.DeferredValue.PErrors()
}

func (promise *DeferredInt) PResolve(result interface{}) {
	promise.init()
	promise.DeferredValue.PResolve(result)
}

func (promise *DeferredInt) PReject(err error) {
	promise.init()
	promise.DeferredValue.PReject(err)
}
